!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	ff.h	/^  int *A;$/;"	m	struct:_EfConn
A	ff.h	/^  int *A;$/;"	m	struct:_FtConn
achieve_goals	relax.c	/^void achieve_goals( int time ) {$/;"	f
act	fip.h	/^	int	act; \/*JC: just for disable*\/$/;"	m	struct:_StateActionPair
action	ff.h	/^  Action *action;$/;"	m	struct:_OpConn
Action	ff.h	/^} Action;$/;"	t	typeref:struct:_Action
action	fip.h	/^	int action;$/;"	m	struct:_PlanNode
action	fip.h	/^	PlanNode	*action;	\/* a pointer to a node in plan tree *\/$/;"	m	struct:_StateActionPair
ActionEffect	ff.h	/^} ActionEffect;$/;"	t	typeref:struct:_ActionEffect
ActionGroup	fip.h	/^} ActionGroup, *ActionGroupPtr;$/;"	t	typeref:struct:_ActionGroup
ActionGroupPtr	fip.h	/^} ActionGroup, *ActionGroupPtr;$/;"	t	typeref:struct:_ActionGroup
actions	fip.h	/^	int actions[MAX_NUM_D_ACTION];$/;"	m	struct:_ActionGroup
action_def	scan-ops_pddl.y	/^action_def:$/;"	l
action_def_body	scan-mul_pddl.y	/^action_def_body:$/;"	l
action_def_body	scan-ops_pddl.y	/^action_def_body:$/;"	l
activate_ef	relax.c	/^void activate_ef( int index, int time ) {$/;"	f
activate_ft	relax.c	/^void activate_ft( int index, int time ) {$/;"	f
additional_action_defs	scan-mul_pddl.y	/^additional_action_defs:$/;"	l
additional_goal_defs	scan-mul_pddl.y	/^additional_goal_defs:$/;"	l
ADDONS	makefile	/^ADDONS	= $/;"	m
adds	ff.h	/^  Fact *adds;$/;"	m	struct:_NormEffect
adds	ff.h	/^  Fact *adds;$/;"	m	struct:_PseudoActionEffect
adds	ff.h	/^  int *adds;$/;"	m	struct:_ActionEffect
addToLeaf	fip.c	/^void addToLeaf(State*s, int act){$/;"	f
add_D_action	fip.c	/^void add_D_action(int index, PlanNode *pNode){	$/;"	f
add_single_action	fip.c	/^void add_single_action(int index, PlanNode *pNode){$/;"	f
add_solved_state	fip.c	/^void add_solved_state( StateActionPair *pState ){	$/;"	f
add_to_bfs_space	search.c	/^void add_to_bfs_space( State *S, int op, BfsNode *father ) {$/;"	f
add_to_ehc_space	search.c	/^void add_to_ehc_space( State *S, int op, EhcNode *father, int new_goal ) {$/;"	f
add_to_group	fip.c	/^void add_to_group(int index){$/;"	f
add_to_initial_state	inst_pre.c	/^void add_to_initial_state( int p, int n, int index ) {$/;"	f
add_unsolved_state	fip.c	/^void add_unsolved_state( StateActionPair *pState ){$/;"	f
adl_effect	scan-mul_pddl.y	/^adl_effect:$/;"	l
adl_effect	scan-ops_pddl.y	/^adl_effect:$/;"	l
adl_effect_star	scan-mul_pddl.y	/^adl_effect_star:$/;"	l
adl_effect_star	scan-ops_pddl.y	/^adl_effect_star:$/;"	l
adl_goal_description	scan-fct_pddl.y	/^adl_goal_description:$/;"	l
adl_goal_description	scan-mul_pddl.y	/^adl_goal_description:$/;"	l
adl_goal_description	scan-ops_pddl.y	/^adl_goal_description:$/;"	l
adl_goal_description_star	scan-fct_pddl.y	/^adl_goal_description_star:$/;"	l
adl_goal_description_star	scan-mul_pddl.y	/^adl_goal_description_star:$/;"	l
adl_goal_description_star	scan-ops_pddl.y	/^adl_goal_description_star:$/;"	l
ALL	ff.h	/^			   ALL, $/;"	e	enum:_Connective
all_goals_activated	relax.c	/^Bool all_goals_activated( int time ) {$/;"	f
AND	ff.h	/^			   AND, $/;"	e	enum:_Connective
ANDs_below_ORs_in_wff	inst_pre.c	/^void ANDs_below_ORs_in_wff( WffNode **w ) {$/;"	f
are_identical_ATOMs	inst_pre.c	/^Bool are_identical_ATOMs( WffNode *w1, WffNode *w2 )$/;"	f
args	ff.h	/^  int predicate, args[MAX_ARITY];$/;"	m	struct:_Fact
args	ff.h	/^  TypedList *args;$/;"	m	struct:_TypedListList
ATOM	ff.h	/^			   ATOM, $/;"	e	enum:_Connective
atom	ff.h	/^  TokenList *atom;$/;"	m	struct:_PlNode
atomic_formula_name	scan-fct_pddl.y	/^atomic_formula_name:$/;"	l
atomic_formula_term	scan-fct_pddl.y	/^atomic_formula_term:$/;"	l
atomic_formula_term	scan-mul_pddl.y	/^atomic_formula_term:$/;"	l
atomic_formula_term	scan-ops_pddl.y	/^atomic_formula_term:$/;"	l
AXIOM_STR	ff.h	/^#define AXIOM_STR /;"	d
backtrack_single_nodes	fip.c	/^void backtrack_single_nodes(State* s, int act){	$/;"	f
backtrack_solved_nodes	fip.c	/^void backtrack_solved_nodes(StateActionPair* p){$/;"	f
base_domain_name	scan-fct_pddl.y	/^base_domain_name :$/;"	l
BfsHashEntry	ff.h	/^} BfsHashEntry, *BfsHashEntry_pointer;$/;"	t	typeref:struct:_BfsHashEntry
BfsHashEntry_pointer	ff.h	/^} BfsHashEntry, *BfsHashEntry_pointer;$/;"	t	typeref:struct:_BfsHashEntry
BfsNode	ff.h	/^} BfsNode;$/;"	t	typeref:struct:_BfsNode
BFS_HASH_BITS	ff.h	/^#define BFS_HASH_BITS /;"	d
BFS_HASH_SIZE	ff.h	/^#define BFS_HASH_SIZE /;"	d
bfs_node	ff.h	/^  BfsNode *bfs_node;$/;"	m	struct:_BfsHashEntry
bfs_state_hashed	search.c	/^Bool bfs_state_hashed( State *S )$/;"	f
BIG_INT	ff.h	/^#define BIG_INT /;"	d
Bool	ff.h	/^typedef unsigned char Bool;$/;"	t
build_action_group	fip.c	/^void build_action_group( void ){$/;"	f
build_easy_action_templates	inst_easy.c	/^void build_easy_action_templates( void ) {$/;"	f
build_False_set	orderings.c	/^void build_False_set( int ft ) {$/;"	f
build_False_set_for_multiple_purpose	orderings.c	/^void build_False_set_for_multiple_purpose ( int ft ) {$/;"	f
build_fixpoint	relax.c	/^int build_fixpoint( State *S ) {$/;"	f
build_goal_agenda	orderings.c	/^void build_goal_agenda( void ) {$/;"	f
build_goal_agenda_for_multiple_purpose	orderings.c	/^void build_goal_agenda_for_multiple_purpose ( void ) {$/;"	f
build_hard_action_templates	inst_hard.c	/^void build_hard_action_templates( void ) {$/;"	f
build_orig_constant_list	parse.c	/^void build_orig_constant_list( void ) {$/;"	f
CC	makefile	/^CC      = gcc$/;"	m
CFLAGS	makefile	/^CFLAGS = -O3 -g -w -ansi $(TYPE) $(ADDONS) $/;"	m
CFLAGS	makefile	/^CFLAGS = -O6 -g -w -ansi $(TYPE) $(ADDONS) $/;"	m
ch	ff.h	/^  Bool ch;$/;"	m	struct:_EfConn
ch	ff.h	/^  Bool ch;$/;"	m	struct:_FtConn
check_parents	fip.c	/^Bool check_parents(State *cS, StateActionPair *ptr){$/;"	f
CHECK_PTR	ff.h	/^#define CHECK_PTR(/;"	d
cleanup_easy_domain	inst_easy.c	/^void cleanup_easy_domain( void ) {$/;"	f
cleanup_easy_domain_for_multiple_purpose	inst_easy.c	/^void cleanup_easy_domain_for_multiple_purpose ( void ) {$/;"	f
cleanup_wff	inst_pre.c	/^void cleanup_wff( WffNode **w ) {$/;"	f
collect_all_strings	inst_pre.c	/^void collect_all_strings( void ) {$/;"	f
collect_A_info	relax.c	/^void collect_A_info( void ) {$/;"	f
collect_hitting_sets	inst_pre.c	/^void collect_hitting_sets( WffNode *ORlist, int index ) {$/;"	f
collect_H_info	relax.c	/^void collect_H_info( void ) {$/;"	f
collect_inertia_information	inst_pre.c	/^void collect_inertia_information( void ) {$/;"	f
collect_type_names_in_pl	parse.c	/^void collect_type_names_in_pl( PlNode *n ) {$/;"	f
compute_goal_agenda	orderings.c	/^void compute_goal_agenda( void ){$/;"	f
compute_goal_agenda_for_multiple_purpose	orderings.c	/^void compute_goal_agenda_for_multiple_purpose ( void ){$/;"	f
conditions	ff.h	/^  Fact *conditions;$/;"	m	struct:_NormEffect
conditions	ff.h	/^  Fact *conditions;$/;"	m	struct:_PseudoActionEffect
conditions	ff.h	/^  int *conditions;$/;"	m	struct:_ActionEffect
conditions	ff.h	/^  WffNode *conditions;$/;"	m	struct:_Effect
Connective	ff.h	/^			   WHEN} Connective;$/;"	t	typeref:enum:_Connective
connective	ff.h	/^  Connective connective;$/;"	m	struct:_PlNode
connective	ff.h	/^  Connective connective;$/;"	m	struct:_WffNode
CONNECTOR	ff.h	/^#define CONNECTOR /;"	d
constants_def	scan-ops_pddl.y	/^constants_def:$/;"	l
convert_ff_plan_to_fip_plan	fip.c	/^void convert_ff_plan_to_fip_plan( PlanNode *pPlanNode ){$/;"	f
copy_source_to_dest	search.c	/^void copy_source_to_dest( State *dest, State *source ) {$/;"	f
copy_state_level	fip.c	/^void copy_state_level(State *dest, State source){$/;"	f
copy_Token	parse.c	/^char *copy_Token( char *s )$/;"	f
copy_TokenList	parse.c	/^TokenList *copy_TokenList( TokenList *source )$/;"	f
copy_Wff	inst_pre.c	/^WffNode *copy_Wff( WffNode *w )$/;"	f
create_integer_representation	inst_pre.c	/^void create_integer_representation( void ) {$/;"	f
create_intersected_type	inst_easy.c	/^int create_intersected_type( TypeArray T, int num_T ) {$/;"	f
create_member_nrs	inst_pre.c	/^void create_member_nrs( void ) {$/;"	f
D	ff.h	/^  int *D;$/;"	m	struct:_EfConn
D	ff.h	/^  int *D;$/;"	m	struct:_FtConn
debug	ff.h	/^  int debug;$/;"	m	struct:_command_line
debugAllSolvedState	fip.c	/^void debugAllSolvedState(){$/;"	f
debugAllUnSolvedState	fip.c	/^void debugAllUnSolvedState(){$/;"	f
debugit	fip.c	/^void debugit(State *s){$/;"	f
DECODE_VAR	ff.h	/^#define DECODE_VAR(/;"	d
decrement_inferior_vars	inst_pre.c	/^void decrement_inferior_vars( int var, WffNode *w ) {$/;"	f
decrement_var_entries	inst_easy.c	/^void decrement_var_entries( NormOperator *o, int start ) {$/;"	f
dels	ff.h	/^  Fact *dels;$/;"	m	struct:_NormEffect
dels	ff.h	/^  Fact *dels;$/;"	m	struct:_PseudoActionEffect
dels	ff.h	/^  int *dels;$/;"	m	struct:_ActionEffect
depth	ff.h	/^  int depth;$/;"	m	struct:_EhcNode
detect_ordering_constraints	orderings.c	/^void detect_ordering_constraints( void ) {$/;"	f
detect_ordering_constraints_for_multiple_purpose	orderings.c	/^void detect_ordering_constraints_for_multiple_purpose ( void ) {$/;"	f
detect_tautologies_in_wff	inst_pre.c	/^void detect_tautologies_in_wff( WffNode **w )$/;"	f
disable_actions	fip.c	/^void disable_actions(State*s, int index){$/;"	f
display_info	ff.h	/^  int display_info;$/;"	m	struct:_command_line
dnf	inst_pre.c	/^void dnf( WffNode **w ) {$/;"	f
domain_definition	scan-ops_pddl.y	/^domain_definition : $/;"	l
domain_name	scan-mul_pddl.y	/^domain_name :$/;"	l
domain_name	scan-ops_pddl.y	/^domain_name :$/;"	l
do_best_first_search	search.c	/^Bool do_best_first_search( void ) {$/;"	f
do_enforced_hill_climbing	search.c	/^Bool do_enforced_hill_climbing( State *start, State *end ) {$/;"	f
do_enforced_hill_climbing_for_multiple_purpose	search.c	/^Bool do_enforced_hill_climbing_for_multiple_purpose ( State *start, State *end ) {$/;"	f
do_inertia_preprocessing_step_1	inst_pre.c	/^void do_inertia_preprocessing_step_1( void ) {$/;"	f
do_weak_planning	search.c	/^Bool do_weak_planning( State *start, State *end ) {$/;"	f
E	ff.h	/^  int *E;$/;"	m	struct:_OpConn
EasyTemplate	ff.h	/^} EasyTemplate;$/;"	t	typeref:struct:_EasyTemplate
EfConn	ff.h	/^} EfConn;$/;"	t	typeref:struct:_EfConn
Effect	ff.h	/^} Effect;$/;"	t	typeref:struct:_Effect
effects	ff.h	/^  ActionEffect *effects;$/;"	m	struct:_Action
effects	ff.h	/^  Effect *effects;$/;"	m	struct:_MixedOperator
effects	ff.h	/^  Effect *effects;$/;"	m	struct:_Operator
effects	ff.h	/^  Literal *effects;$/;"	m	struct:_Effect
effects	ff.h	/^  NormEffect *effects;$/;"	m	struct:_NormOperator
effects	ff.h	/^  PlNode *effects;$/;"	m	struct:_PlOperator
effects	ff.h	/^  PseudoActionEffect *effects;$/;"	m	struct:_PseudoAction
EhcHashEntry	ff.h	/^} EhcHashEntry, *EhcHashEntry_pointer;$/;"	t	typeref:struct:_EhcHashEntry
EhcHashEntry_pointer	ff.h	/^} EhcHashEntry, *EhcHashEntry_pointer;$/;"	t	typeref:struct:_EhcHashEntry
EhcNode	ff.h	/^} EhcNode;$/;"	t	typeref:struct:_EhcNode
EHC_HASH_BITS	ff.h	/^#define EHC_HASH_BITS /;"	d
EHC_HASH_SIZE	ff.h	/^#define EHC_HASH_SIZE /;"	d
ehc_node	ff.h	/^  EhcNode *ehc_node;$/;"	m	struct:_EhcHashEntry
ehc_state_hashed	search.c	/^Bool ehc_state_hashed( State *S ) {$/;"	f
EITHER_STR	ff.h	/^#define EITHER_STR /;"	d
encode_domain_in_integers	inst_pre.c	/^void encode_domain_in_integers( void ) {$/;"	f
encode_easy_unaries_as_types	inst_easy.c	/^void encode_easy_unaries_as_types( void ) {$/;"	f
encode_easy_unaries_as_types_for_multiple_purpose	inst_easy.c	/^void encode_easy_unaries_as_types_for_multiple_purpose ( void ) {$/;"	f
ENCODE_VAR	ff.h	/^#define ENCODE_VAR(/;"	d
ERROR_AND_EXIT	fip.c	/^#define ERROR_AND_EXIT(/;"	d	file:
EX	ff.h	/^			   EX, $/;"	e	enum:_Connective
expand_first_node	search.c	/^int expand_first_node( int h ) {$/;"	f
expand_quantifiers_in_wff	inst_pre.c	/^void expand_quantifiers_in_wff( WffNode **w, int var, int constant )$/;"	f
extract_1P	relax.c	/^int extract_1P( int max, Bool H_info ) {$/;"	f
extract_plan	search.c	/^void extract_plan( BfsNode *last )$/;"	f
extract_plan_fragment	search.c	/^void extract_plan_fragment( State *S ) {$/;"	f
F	ff.h	/^  int *F;$/;"	m	struct:_State
fact	ff.h	/^  Fact *fact;$/;"	m	struct:_Facts
fact	ff.h	/^  Fact *fact;$/;"	m	struct:_WffNode
fact	ff.h	/^  Fact fact;$/;"	m	struct:_Literal
Fact	ff.h	/^} Fact;$/;"	t	typeref:struct:_Fact
FactList	ff.h	/^} FactList;$/;"	t	typeref:struct:_FactList
Facts	ff.h	/^} Facts;$/;"	t	typeref:struct:_Facts
FAL	ff.h	/^			   FAL,$/;"	e	enum:_Connective
False	ff.h	/^  int *False;$/;"	m	struct:_FtConn
FALSE	ff.h	/^#define FALSE /;"	d
father	ff.h	/^  struct _BfsNode *father;$/;"	m	struct:_BfsNode	typeref:struct:_BfsNode::_BfsNode
father	ff.h	/^  struct _EhcNode *father;$/;"	m	struct:_EhcNode	typeref:struct:_EhcNode::_EhcNode
fct_file_name	ff.h	/^  char fct_file_name[MAX_LENGTH];$/;"	m	struct:_command_line
ff_usage	main.c	/^void ff_usage( void ) {$/;"	f
file	scan-fct_pddl.y	/^file:$/;"	l
file	scan-mul_pddl.y	/^file:$/;"	l
file	scan-ops_pddl.y	/^file:$/;"	l
find_intersected_type	inst_easy.c	/^int find_intersected_type( TypeArray T, int num_T ) {$/;"	f
FIP_H	fip.h	/^#define FIP_H$/;"	d
free_FactList	memory.c	/^void free_FactList( FactList *source )$/;"	f
free_NormEffect	memory.c	/^void free_NormEffect( NormEffect *e ) {$/;"	f
free_NormOperator	memory.c	/^void free_NormOperator( NormOperator *o ) {$/;"	f
free_Operator	memory.c	/^void free_Operator( Operator *o )$/;"	f
free_partial_Effect	memory.c	/^void free_partial_Effect( Effect *e )$/;"	f
free_PlNode	memory.c	/^void free_PlNode( PlNode *node )$/;"	f
free_PlOperator	memory.c	/^void free_PlOperator( PlOperator *o )$/;"	f
free_single_Action	memory.c	/^void free_single_Action( Action *a )$/;"	f
free_single_EasyTemplate	memory.c	/^void free_single_EasyTemplate( EasyTemplate *t )$/;"	f
free_single_NormEffect	memory.c	/^void free_single_NormEffect( NormEffect *e )$/;"	f
free_StateActionPair	memory.c	/^void free_StateActionPair( StateActionPair* p ){$/;"	f
free_StateHashEntryList	memory.c	/^void free_StateHashEntryList( EhcHashEntry * p ){$/;"	f
free_TokenList	memory.c	/^void free_TokenList( TokenList *source )$/;"	f
free_TypedList	memory.c	/^void free_TypedList( TypedList *t )$/;"	f
free_TypedListList	memory.c	/^void free_TypedListList( TypedListList *t )$/;"	f
free_WffNode	memory.c	/^void free_WffNode( WffNode *w )$/;"	f
FtConn	ff.h	/^} FtConn;$/;"	t	typeref:struct:_FtConn
gA	main.c	/^int *gA;$/;"	v
gactions	main.c	/^Action *gactions;$/;"	v
gact_filename	main.c	/^char *gact_filename;$/;"	v
gadd_actions	main.c	/^Action *gadd_actions;$/;"	v
gadd_easy_operators	main.c	/^NormOperator_pointer *gadd_easy_operators;$/;"	v
gadd_easy_templates	main.c	/^EasyTemplate *gadd_easy_templates;$/;"	v
gadd_ef_conn	main.c	/^EfConn *gadd_ef_conn;$/;"	v
gadd_ft_conn	main.c	/^FtConn *gadd_ft_conn;$/;"	v
gadd_goal	main.c	/^WffNode *gadd_goal = NULL;$/;"	v
gadd_goal_state	main.c	/^State gadd_goal_state;$/;"	v
gadd_hard_mixed_operators	main.c	/^MixedOperator *gadd_hard_mixed_operators;$/;"	v
gadd_hard_operators	main.c	/^Operator_pointer *gadd_hard_operators;$/;"	v
gadd_hard_templates	main.c	/^PseudoAction_pointer *gadd_hard_templates;$/;"	v
gadd_loaded_ops	main.c	/^PlOperator *gadd_loaded_ops = NULL;$/;"	v
gadd_num_actions	main.c	/^int gadd_num_actions;$/;"	v
gadd_num_easy_operators	main.c	/^int gadd_num_easy_operators;$/;"	v
gadd_num_easy_templates	main.c	/^int gadd_num_easy_templates;$/;"	v
gadd_num_ef_conn	main.c	/^int gadd_num_ef_conn;$/;"	v
gadd_num_ft_conn	main.c	/^int gadd_num_ft_conn; $/;"	v
gadd_num_hard_mixed_operators	main.c	/^int gadd_num_hard_mixed_operators;$/;"	v
gadd_num_hard_operators	main.c	/^int gadd_num_hard_operators;$/;"	v
gadd_num_hard_templates	main.c	/^int gadd_num_hard_templates;$/;"	v
gadd_num_operators	main.c	/^int gadd_num_operators = 0;$/;"	v
gadd_num_op_conn	main.c	/^int gadd_num_op_conn;$/;"	v
gadd_operators	main.c	/^Operator_pointer gadd_operators[MAX_OPERATORS];$/;"	v
gadd_op_conn	main.c	/^OpConn *gadd_op_conn;$/;"	v
gadd_orig_goal_facts	main.c	/^PlNode *gadd_orig_goal_facts = NULL;$/;"	v
garity	main.c	/^int garity[MAX_PREDICATES];$/;"	v
gbracket_count	main.c	/^int gbracket_count;$/;"	v
gcmd_line	main.c	/^struct _command_line gcmd_line;$/;"	v	typeref:struct:_command_line
gconn_time	main.c	/^double gtempl_time = 0, greach_time = 0, grelev_time = 0, gconn_time = 0;$/;"	v
gconstants	main.c	/^Token gconstants[MAX_CONSTANTS];$/;"	v
gdomain_name	main.c	/^char *gdomain_name = NULL;$/;"	v
geasy_operators	main.c	/^NormOperator_pointer *geasy_operators;$/;"	v
geasy_templates	main.c	/^EasyTemplate *geasy_templates;$/;"	v
gef_conn	main.c	/^EfConn *gef_conn;$/;"	v
getFactAddress	fip.c	/^int getFactAddress(int *p, int n){$/;"	f
GetNumVar	fip.c	/^#define GetNumVar(/;"	d	file:
GetOPName	fip.c	/^#define GetOPName(/;"	d	file:
GetOPParamInst	fip.c	/^#define GetOPParamInst(/;"	d	file:
get_1P	relax.c	/^int get_1P( State *S, State *current_goals ) {$/;"	f
get_1P_and_H	relax.c	/^int get_1P_and_H( State *S, State *current_goals ) {$/;"	f
get_A	relax.c	/^void get_A( State *S ) {$/;"	f
GET_CONSTANT	ff.h	/^#define GET_CONSTANT(/;"	d
get_next_unsolved_state	fip.c	/^StateActionPair* get_next_unsolved_state(){$/;"	f
get_type	parse.c	/^int get_type( char *str ) {$/;"	f
gevaluated_states	main.c	/^int gevaluated_states = 0;$/;"	v
gfipPlan	main.c	/^PlanNode gfipPlan;$/;"	v
gft_conn	main.c	/^FtConn *gft_conn;$/;"	v
gfull_initial	main.c	/^Fact *gfull_initial;$/;"	v
ggoal	main.c	/^WffNode *ggoal = NULL;$/;"	v
ggoal_agenda	main.c	/^State *ggoal_agenda;$/;"	v
ggoal_state	main.c	/^State ggoal_state;$/;"	v
gH	main.c	/^int *gH;$/;"	v
ghard_mixed_operators	main.c	/^MixedOperator *ghard_mixed_operators;$/;"	v
ghard_operators	main.c	/^Operator_pointer *ghard_operators;$/;"	v
ghard_templates	main.c	/^PseudoAction_pointer *ghard_templates;$/;"	v
ginitial	main.c	/^Facts *ginitial = NULL;$/;"	v
ginitial_predicate	main.c	/^Fact **ginitial_predicate;$/;"	v
ginitial_state	main.c	/^State ginitial_state;$/;"	v
gini_pair	main.c	/^StateActionPair *gini_pair = NULL;$/;"	v
gintersected_types	main.c	/^TypeArray gintersected_types[MAX_TYPES];$/;"	v
gInvActs	main.c	/^StateActionPair *gInvActs;$/;"	v
gin_plan_E	main.c	/^int *gin_plan_E;$/;"	v
gis_added	main.c	/^Bool gis_added[MAX_PREDICATES];$/;"	v
gis_deleted	main.c	/^Bool gis_deleted[MAX_PREDICATES];$/;"	v
gis_member	main.c	/^Bool gis_member[MAX_CONSTANTS][MAX_TYPES];$/;"	v
gloaded_axioms	main.c	/^PlOperator *gloaded_axioms = NULL;$/;"	v
gloaded_ops	main.c	/^PlOperator *gloaded_ops = NULL;$/;"	v
gmax_search_depth	main.c	/^int gmax_search_depth = 0;$/;"	v
gmember_nr	main.c	/^int gmember_nr[MAX_CONSTANTS][MAX_TYPES];\/* nr of object within a type *\/$/;"	v
gmul_domain_name	main.c	/^char *gmul_domain_name = NULL;$/;"	v
gmul_problem_name	main.c	/^char *gmul_problem_name;$/;"	v
gnum_A	main.c	/^int gnum_A;$/;"	v
gnum_actions	main.c	/^int gnum_actions;$/;"	v
gnum_constants	main.c	/^int gnum_constants = 0;$/;"	v
gnum_easy_operators	main.c	/^int gnum_easy_operators;$/;"	v
gnum_easy_templates	main.c	/^int gnum_easy_templates;$/;"	v
gnum_ef_conn	main.c	/^int gnum_ef_conn;$/;"	v
gnum_fip_plan_node	main.c	/^int gnum_fip_plan_node = 0;$/;"	v
gnum_ft_conn	main.c	/^int gnum_ft_conn;$/;"	v
gnum_full_initial	main.c	/^int gnum_full_initial = 0;$/;"	v
gnum_goal_agenda	main.c	/^int gnum_goal_agenda;$/;"	v
gnum_H	main.c	/^int gnum_H;$/;"	v
gnum_hard_mixed_operators	main.c	/^int gnum_hard_mixed_operators;$/;"	v
gnum_hard_operators	main.c	/^int gnum_hard_operators;$/;"	v
gnum_hard_templates	main.c	/^int gnum_hard_templates;$/;"	v
gnum_initial	main.c	/^int gnum_initial = 0;$/;"	v
gnum_initial_predicate	main.c	/^int *gnum_initial_predicate;$/;"	v
gnum_intersected_types	main.c	/^int gnum_intersected_types[MAX_TYPES];$/;"	v
gnum_in_plan_E	main.c	/^int gnum_in_plan_E;$/;"	v
gnum_IV	main.c	/^int gnum_IV = 0;$/;"	v
gnum_operators	main.c	/^int gnum_operators = 0;$/;"	v
gnum_op_conn	main.c	/^int gnum_op_conn;$/;"	v
gnum_plan_ops	main.c	/^int gnum_plan_ops = 0;$/;"	v
gnum_pp_facts	main.c	/^int gnum_pp_facts = 0;$/;"	v
gnum_predicates	main.c	/^int gnum_predicates = 0;$/;"	v
gnum_relevant_facts	main.c	/^int gnum_relevant_facts = 0;$/;"	v
gnum_solved_states	main.c	/^int gnum_solved_states = 0;$/;"	v
gnum_types	main.c	/^int gnum_types = 0;$/;"	v
gnum_unsolved_states	main.c	/^int gnum_unsolved_states = 0;$/;"	v
goal_def	scan-fct_pddl.y	/^goal_def:$/;"	l
goperators	main.c	/^Operator_pointer goperators[MAX_OPERATORS];$/;"	v
gop_conn	main.c	/^OpConn *gop_conn;$/;"	v
gorig_constant_list	main.c	/^FactList *gorig_constant_list = NULL;$/;"	v
gorig_goal_facts	main.c	/^PlNode *gorig_goal_facts = NULL;$/;"	v
gorig_initial_facts	main.c	/^PlNode *gorig_initial_facts = NULL;$/;"	v
gparse_constants	main.c	/^TypedList *gparse_constants = NULL;$/;"	v
gparse_objects	main.c	/^TypedList *gparse_objects = NULL;$/;"	v
gparse_predicates	main.c	/^TypedListList *gparse_predicates = NULL;$/;"	v
gparse_types	main.c	/^TypedList *gparse_types = NULL;$/;"	v
gplan_ops	main.c	/^int gplan_ops[MAX_PLAN_LENGTH];$/;"	v
gplan_states	main.c	/^State gplan_states[MAX_PLAN_LENGTH + 1];$/;"	v
gpredicates	main.c	/^Token gpredicates[MAX_PREDICATES];$/;"	v
gpredicates_and_types	main.c	/^FactList *gpredicates_and_types = NULL;$/;"	v
gpredicates_args_type	main.c	/^int gpredicates_args_type[MAX_PREDICATES][MAX_ARITY];$/;"	v
gpredicate_to_type	main.c	/^int gpredicate_to_type[MAX_TYPES];$/;"	v
gproblem_name	main.c	/^char *gproblem_name;$/;"	v
greach_time	main.c	/^double gtempl_time = 0, greach_time = 0, grelev_time = 0, gconn_time = 0;$/;"	v
grelevant_facts	main.c	/^Fact grelevant_facts[MAX_RELEVANT_FACTS];$/;"	v
grelev_time	main.c	/^double gtempl_time = 0, greach_time = 0, grelev_time = 0, gconn_time = 0;$/;"	v
group	ff.h	/^  int group;$/;"	m	struct:_OpConn
gsearch_time	main.c	/^double gsearch_time = 0;$/;"	v
gsolved_states	main.c	/^StateActionPair *gsolved_states = NULL;$/;"	v
gTail	main.c	/^StateActionPair *gTail = NULL;$/;"	v
gtempl_time	main.c	/^double gtempl_time = 0, greach_time = 0, grelev_time = 0, gconn_time = 0;$/;"	v
gtype_consts	main.c	/^int gtype_consts[MAX_TYPES][MAX_TYPE];$/;"	v
gtype_names	main.c	/^Token gtype_names[MAX_TYPES];$/;"	v
gtype_size	main.c	/^int gtype_size[MAX_TYPES];$/;"	v
gtype_to_predicate	main.c	/^int gtype_to_predicate[MAX_PREDICATES];$/;"	v
gunsovled_states	main.c	/^StateActionPair *gunsovled_states = NULL;$/;"	v
g_is_strong	main.c	/^Bool g_is_strong = FALSE;$/;"	v
h	ff.h	/^  int h;$/;"	m	struct:_BfsNode
handle_empty_easy_parameters	inst_easy.c	/^void handle_empty_easy_parameters( void ) {$/;"	f
handle_empty_easy_parameters_for_multiple_purpose	inst_easy.c	/^void handle_empty_easy_parameters_for_multiple_purpose ( void ) {$/;"	f
hard	ff.h	/^  Bool hard;$/;"	m	struct:_Operator
hash_bfs_node	search.c	/^void hash_bfs_node( BfsNode *n )$/;"	f
hash_ehc_node	search.c	/^void hash_ehc_node( EhcNode *n ) {$/;"	f
hash_plan_state	search.c	/^PlanHashEntry *hash_plan_state( State *S, int step ) {$/;"	f
HIDDEN_STR	ff.h	/^#define HIDDEN_STR /;"	d
highest_seen	relax.c	/^static int highest_seen;$/;"	v	file:
I	ff.h	/^  int *I;$/;"	m	struct:_EfConn
id	fip.h	/^	int	id;				\/* state id, useful for plan printing *\/$/;"	m	struct:_StateActionPair
id	fip.h	/^	int	id;$/;"	m	struct:_PlanNode
identical_fact	inst_easy.c	/^Bool identical_fact( Fact *f1, Fact *f2 ) {$/;"	f
increaseIndent	fip.c	/^void increaseIndent( int indent ){$/;"	f
increment_state_level_id	fip.c	/^void increment_state_level_id(State *dest, State source){$/;"	f
INFINITY	ff.h	/^#define INFINITY /;"	d
initialize_fixpoint	relax.c	/^void initialize_fixpoint( State *S ) {$/;"	f
initialize_goals	relax.c	/^int initialize_goals( int max ) {$/;"	f
initialize_relax	relax.c	/^void initialize_relax( void ) {$/;"	f
init_def	scan-fct_pddl.y	/^init_def:$/;"	l
instances	fip.h	/^	int instances;$/;"	m	struct:_ActionGroup
inst_table	ff.h	/^  int inst_table[MAX_VARS];$/;"	m	struct:_Action
inst_table	ff.h	/^  int inst_table[MAX_VARS];$/;"	m	struct:_EasyTemplate
inst_table	ff.h	/^  int inst_table[MAX_VARS];$/;"	m	struct:_MixedOperator
inst_table	ff.h	/^  int inst_table[MAX_VARS];$/;"	m	struct:_NormEffect
inst_table	ff.h	/^  int inst_table[MAX_VARS];$/;"	m	struct:_NormOperator
inst_table	ff.h	/^  int inst_table[MAX_VARS];$/;"	m	struct:_PseudoAction
intended_state	fip.h	/^	State	intended_state;$/;"	m	struct:_StateActionPair
int_pointer	ff.h	/^typedef int *int_pointer;$/;"	t
in_E	ff.h	/^  Bool in_E;$/;"	m	struct:_EfConn
in_F	ff.h	/^  Bool in_F;$/;"	m	struct:_FtConn
in_plan	ff.h	/^  Bool in_plan;$/;"	m	struct:_EfConn
isReferenced	fip.h	/^	Bool	isReferenced;$/;"	m	struct:_PlanNode
is_dnf	inst_pre.c	/^int is_dnf( WffNode *w ) {$/;"	f
is_D_action	fip.c	/^Bool is_D_action(const char *name){$/;"	f
is_eff_literal	parse.c	/^Bool is_eff_literal( PlNode *n )$/;"	f
is_global_goal	ff.h	/^  Bool is_global_goal;\/* fast goal add finding *\/$/;"	m	struct:_FtConn
is_goal	ff.h	/^  int is_goal;$/;"	m	struct:_FtConn
is_in_A	ff.h	/^  Bool is_in_A;$/;"	m	struct:_OpConn
is_in_goal	search.c	/^Bool is_in_goal( State *S1, State *S2 ) {$/;"	f
is_in_H	ff.h	/^  Bool is_in_H;$/;"	m	struct:_OpConn
is_solved_state	fip.c	/^StateActionPair* is_solved_state( State *pState ){$/;"	f
is_strong_less_than	fip.c	/^Bool is_strong_less_than(State s1, State s2){$/;"	f
is_subtype	inst_pre.c	/^Bool is_subtype( int t1, int t2 )$/;"	f
is_true	ff.h	/^  int is_true;$/;"	m	struct:_FtConn
is_unsolved_state	fip.c	/^StateActionPair* is_unsolved_state( State *pState ){$/;"	f
is_used	ff.h	/^  int is_used;$/;"	m	struct:_OpConn
is_weak_less_than	fip.c	/^Bool is_weak_less_than(State s1, State s2){$/;"	f
is_wff	parse.c	/^Bool is_wff( PlNode *n ) {$/;"	f
item	ff.h	/^  char *item;$/;"	m	struct:_TokenList
item	ff.h	/^  TokenList *item;$/;"	m	struct:_FactList
L	ff.h	/^  int L[MAX_LEVEL];$/;"	m	struct:_State
l0P_E	relax.c	/^int *l0P_E;$/;"	v
LABEL_STR	fip.c	/^#define LABEL_STR /;"	d	file:
label_unsolved_state	fip.c	/^void label_unsolved_state(State *dest, State *source){$/;"	f
lActionGroup	fip.c	/^ActionGroup lActionGroup[MAX_ACTIONGROUP];$/;"	v
ladd_e	inst_easy.c	/^NormEffect *ladd_e;$/;"	v
ladd_inertia_conds	inst_easy.c	/^int ladd_inertia_conds[MAX_VARS];$/;"	v
ladd_multiply_parameters	inst_easy.c	/^int ladd_multiply_parameters[MAX_VARS];$/;"	v
ladd_num_inertia_conds	inst_easy.c	/^int ladd_num_inertia_conds;$/;"	v
ladd_num_multiply_parameters	inst_easy.c	/^int ladd_num_multiply_parameters;$/;"	v
ladd_o	inst_easy.c	/^NormOperator *ladd_o;$/;"	v
ladd_res	inst_easy.c	/^NormEffect *ladd_res;$/;"	v
largs	inst_final.c	/^int largs[MAX_VARS];$/;"	v
lbfs_hash_entry	search.c	/^BfsHashEntry_pointer lbfs_hash_entry[BFS_HASH_SIZE];$/;"	v
lbfs_space_had	search.c	/^BfsNode *lbfs_space_head, *lbfs_space_had;$/;"	v
lbfs_space_head	search.c	/^BfsNode *lbfs_space_head, *lbfs_space_had;$/;"	v
lch	orderings.c	/^int *lch;$/;"	v
lchanged_ehc_entry	search.c	/^Bool lchanged_ehc_entry[EHC_HASH_SIZE];$/;"	v
lchanged_ehc_entrys	search.c	/^int lchanged_ehc_entrys[EHC_HASH_SIZE];$/;"	v
lch_E	relax.c	/^int *lch_E;$/;"	v
lch_F	relax.c	/^int *lch_F;$/;"	v
lconsts	inst_pre.c	/^int lconsts[MAX_ARITY];$/;"	v
lcurrent_goals	relax.c	/^State lcurrent_goals;$/;"	v
lcurrent_goals	search.c	/^State lcurrent_goals;$/;"	v
lDcount	orderings.c	/^int *lDcount;$/;"	v
le	inst_easy.c	/^NormEffect *le;$/;"	v
lE	relax.c	/^int *lE;$/;"	v
lehc_current_end	search.c	/^EhcNode *lehc_space_head, *lehc_space_end, *lehc_current_start, *lehc_current_end;$/;"	v
lehc_current_start	search.c	/^EhcNode *lehc_space_head, *lehc_space_end, *lehc_current_start, *lehc_current_end;$/;"	v
lehc_hash_entry	search.c	/^EhcHashEntry_pointer lehc_hash_entry[EHC_HASH_SIZE];$/;"	v
lehc_space_end	search.c	/^EhcNode *lehc_space_head, *lehc_space_end, *lehc_current_start, *lehc_current_end;$/;"	v
lehc_space_head	search.c	/^EhcNode *lehc_space_head, *lehc_space_end, *lehc_current_start, *lehc_current_end;$/;"	v
leither_ty	parse.c	/^int leither_ty[MAX_TYPES][MAX_TYPES];$/;"	v
lend	main.c	/^struct timeb lstart, lend;$/;"	v	typeref:struct:
LESS	relax.c	/^Bool LESS( int a, int b ) {$/;"	f
level	ff.h	/^  int level;$/;"	m	struct:_EfConn
level	ff.h	/^  int level;$/;"	m	struct:_FtConn
lF	relax.c	/^int *lF;$/;"	v
lgoals_at	relax.c	/^int **lgoals_at;$/;"	v
lh	relax.c	/^int lh;$/;"	v
lhitting_sets	inst_pre.c	/^WffNode *lhitting_sets;$/;"	v
LIBS	makefile	/^LIBS    = -lm$/;"	m
lin	orderings.c	/^Bool *lin;$/;"	v
lindex	inst_final.c	/^int_pointer lindex[MAX_PREDICATES];$/;"	v
lineno	main.c	/^int lineno = 1;$/;"	v
linertia_conds	inst_easy.c	/^int linertia_conds[MAX_VARS];$/;"	v
lini	inst_hard.c	/^int_pointer lini[MAX_PREDICATES];$/;"	v
linst_table	inst_hard.c	/^int linst_table[MAX_VARS];$/;"	v
lin_ch	orderings.c	/^Bool *lin_ch;$/;"	v
Literal	ff.h	/^} Literal;$/;"	t	typeref:struct:_Literal
literal_name	scan-fct_pddl.y	/^literal_name:$/;"	l
literal_name_plus	scan-fct_pddl.y	/^literal_name_plus:$/;"	l
literal_term	scan-fct_pddl.y	/^literal_term:$/;"	l
literal_term	scan-mul_pddl.y	/^literal_term:$/;"	l
literal_term	scan-ops_pddl.y	/^literal_term:$/;"	l
lm	orderings.c	/^Bool **lm;$/;"	v
lmax_set	inst_pre.c	/^int lmax_set;$/;"	v
lmultiply_parameters	inst_easy.c	/^int lmultiply_parameters[MAX_VARS];$/;"	v
lneg	inst_final.c	/^int_pointer lneg[MAX_PREDICATES];$/;"	v
lnum_0P_E	relax.c	/^int lnum_0P_E;$/;"	v
lnum_action_group	fip.c	/^int			lnum_action_group = 0;$/;"	v
lnum_ch	orderings.c	/^int lnum_ch;$/;"	v
lnum_changed_ehc_entrys	search.c	/^int lnum_changed_ehc_entrys;$/;"	v
lnum_ch_E	relax.c	/^int lnum_ch_E;$/;"	v
lnum_ch_F	relax.c	/^int lnum_ch_F;$/;"	v
lnum_E	relax.c	/^int lnum_E;$/;"	v
lnum_ehc_hash_entry	search.c	/^int lnum_ehc_hash_entry[EHC_HASH_SIZE];$/;"	v
lnum_either_ty	parse.c	/^int lnum_either_ty[MAX_TYPES];$/;"	v
lnum_F	relax.c	/^int lnum_F;$/;"	v
lnum_goals_at	relax.c	/^int *lnum_goals_at;$/;"	v
lnum_inertia_conds	inst_easy.c	/^int lnum_inertia_conds;$/;"	v
lnum_multiply_parameters	inst_easy.c	/^int lnum_multiply_parameters;$/;"	v
lnum_types	parse.c	/^int lnum_types;$/;"	v
lnum_used_O	relax.c	/^int lnum_used_O;$/;"	v
lo	inst_easy.c	/^NormOperator *lo;$/;"	v
lp	inst_final.c	/^int lp;$/;"	v
lplan_hash_entry	search.c	/^PlanHashEntry_pointer lplan_hash_entry[PLAN_HASH_SIZE];$/;"	v
lpos	inst_final.c	/^int_pointer lpos[MAX_PREDICATES];$/;"	v
lres	inst_easy.c	/^NormEffect *lres;$/;"	v
lset	inst_pre.c	/^WffNode_pointer *lset;$/;"	v
lstart	main.c	/^struct timeb lstart, lend;$/;"	v	typeref:struct:timeb
ltype_names	parse.c	/^Token ltype_names[MAX_TYPES];$/;"	v
luse	inst_final.c	/^int_pointer luse[MAX_PREDICATES];$/;"	v
lused_O	relax.c	/^int *lused_O;$/;"	v
lvar_names	inst_pre.c	/^char *lvar_names[MAX_VARS];$/;"	v
lvar_types	inst_pre.c	/^int lvar_types[MAX_VARS];$/;"	v
main	main.c	/^int main( int argc, char *argv[] ) {$/;"	f
make_adl_domain	parse.c	/^Bool make_adl_domain( void ) {$/;"	f
make_conjunction_of_atoms	parse.c	/^Bool make_conjunction_of_atoms( PlNode **n ) {$/;"	f
make_conjunction_of_literals	parse.c	/^Bool make_conjunction_of_literals( PlNode **n )$/;"	f
make_effect	inst_pre.c	/^Effect *make_effect( PlNode *p, int num_vars ) {$/;"	f
make_effects	parse.c	/^Bool make_effects( PlNode **n )$/;"	f
make_either_ty	parse.c	/^void make_either_ty( TypedList *tyl ) {$/;"	f
make_either_ty_in_pl	parse.c	/^void make_either_ty_in_pl( PlNode *n ) {$/;"	f
make_Fact	inst_pre.c	/^void make_Fact( Fact *f, PlNode *n, int num_vars ) {$/;"	f
make_normal_effects	inst_pre.c	/^void make_normal_effects( NormOperator **nop, Operator *op ) {$/;"	f
make_state	memory.c	/^void make_state( State *S, int n ) {$/;"	f
make_Wff	inst_pre.c	/^WffNode *make_Wff( PlNode *p, int num_vars ) {$/;"	f
matches	inst_pre.c	/^Bool matches( Fact *f1, Fact *f2 )$/;"	f
MAX_ACTIONGROUP	fip.c	/^#define MAX_ACTIONGROUP	/;"	d	file:
MAX_ARITY	ff.h	/^#define MAX_ARITY /;"	d
MAX_CONSTANTS	ff.h	/^#define MAX_CONSTANTS /;"	d
max_F	ff.h	/^  int max_F;$/;"	m	struct:_State
MAX_HITTING_SET_DEFAULT	ff.h	/^#define MAX_HITTING_SET_DEFAULT /;"	d
MAX_INVALID_ACTIONS	fip.h	/^#define MAX_INVALID_ACTIONS /;"	d
MAX_LENGTH	ff.h	/^#define MAX_LENGTH /;"	d
MAX_LEVEL	ff.h	/^#define MAX_LEVEL /;"	d
MAX_NUM_D_ACTION	fip.h	/^#define MAX_NUM_D_ACTION /;"	d
MAX_OPERATORS	ff.h	/^#define MAX_OPERATORS /;"	d
MAX_PI_PARENTS	fip.h	/^#define MAX_PI_PARENTS /;"	d
MAX_PLAN_LENGTH	ff.h	/^#define MAX_PLAN_LENGTH /;"	d
MAX_PREDICATES	ff.h	/^#define MAX_PREDICATES /;"	d
MAX_RELEVANT_FACTS	ff.h	/^#define MAX_RELEVANT_FACTS /;"	d
MAX_TYPE	ff.h	/^#define MAX_TYPE /;"	d
MAX_TYPES	ff.h	/^#define MAX_TYPES /;"	d
MAX_TYPE_INTERSECTIONS	ff.h	/^#define MAX_TYPE_INTERSECTIONS /;"	d
MAX_VARS	ff.h	/^#define MAX_VARS /;"	d
meet_solved_state	fip.c	/^short meet_solved_state(StateActionPair *pCurrentState, StateActionPair *pNextState, int act){$/;"	f
merge_ANDs_and_ORs_in_wff	inst_pre.c	/^void merge_ANDs_and_ORs_in_wff( WffNode **w )$/;"	f
merge_next_step_ANDs_and_ORs_in_wff	inst_pre.c	/^void merge_next_step_ANDs_and_ORs_in_wff( WffNode **w ) {$/;"	f
MixedOperator	ff.h	/^} MixedOperator;$/;"	t	typeref:struct:_MixedOperator
multigoal_definition	scan-mul_pddl.y	/^multigoal_definition : $/;"	l
multiply_easy_effect_parameters	inst_easy.c	/^void multiply_easy_effect_parameters( void ) {$/;"	f
multiply_easy_effect_parameters_for_multiple_purpose	inst_easy.c	/^void multiply_easy_effect_parameters_for_multiple_purpose ( void ) {$/;"	f
multiply_easy_non_constrained_effect_parameters_for_multiple_purpose	inst_easy.c	/^void multiply_easy_non_constrained_effect_parameters_for_multiple_purpose ( int curr_parameter ) {$/;"	f
multiply_easy_non_constrained_op_parameters	inst_easy.c	/^void multiply_easy_non_constrained_op_parameters( int curr_parameter )$/;"	f
multiply_easy_op_parameters	inst_easy.c	/^void multiply_easy_op_parameters( void ) {$/;"	f
multiply_easy_op_parameters_for_multiple_purpose	inst_easy.c	/^void multiply_easy_op_parameters_for_multiple_purpose ( void ) {$/;"	f
mul_file_name	ff.h	/^  char mul_file_name[MAX_LENGTH];$/;"	m	struct:_command_line
myend	main.c	/^struct timeb mystart, myend;$/;"	v	typeref:struct:
mystart	main.c	/^struct timeb mystart, myend;$/;"	v	typeref:struct:timeb
n	ff.h	/^  int n;$/;"	m	struct:_TypedList
name	ff.h	/^  char *name, *var_names[MAX_VARS];$/;"	m	struct:_Operator
name	ff.h	/^  char *name;$/;"	m	struct:_Action
name	ff.h	/^  char *name;$/;"	m	struct:_PlOperator
name	ff.h	/^  char *name;$/;"	m	struct:_TypedList
name	fip.h	/^	char *name;$/;"	m	struct:_ActionGroup
name_inst_table	ff.h	/^  int name_inst_table[MAX_VARS];$/;"	m	struct:_Action
name_plus	scan-fct_pddl.y	/^name_plus:$/;"	l
name_plus	scan-mul_pddl.y	/^name_plus:$/;"	l
name_plus	scan-ops_pddl.y	/^name_plus:$/;"	l
name_star	scan-fct_pddl.y	/^name_star:$/;"	l
NAME_STR	ff.h	/^#define NAME_STR /;"	d
negated	ff.h	/^  Bool negated;$/;"	m	struct:_Literal
new_Action	memory.c	/^Action *new_Action( void )$/;"	f
new_axiom_op_list	memory.c	/^PlOperator *new_axiom_op_list( void )$/;"	f
new_BfsHashEntry	memory.c	/^BfsHashEntry *new_BfsHashEntry( void )$/;"	f
new_BfsNode	memory.c	/^BfsNode *new_BfsNode( void )$/;"	f
new_EasyTemplate	memory.c	/^EasyTemplate *new_EasyTemplate( NormOperator *op )$/;"	f
new_ef	relax.c	/^void new_ef( int index ) {$/;"	f
new_Effect	memory.c	/^Effect *new_Effect( void )$/;"	f
new_EhcHashEntry	memory.c	/^EhcHashEntry *new_EhcHashEntry( void )$/;"	f
new_EhcNode	memory.c	/^EhcNode *new_EhcNode( void )$/;"	f
new_Fact	memory.c	/^Fact *new_Fact( void )$/;"	f
new_fact	relax.c	/^void new_fact( int index ) {$/;"	f
new_FactList	memory.c	/^FactList *new_FactList( void )$/;"	f
new_Facts	memory.c	/^Facts *new_Facts( void )$/;"	f
new_goal	ff.h	/^  int new_goal;$/;"	m	struct:_EhcNode
new_goal_gets_deleted	search.c	/^Bool new_goal_gets_deleted( EhcNode *n ) {$/;"	f
new_Literal	memory.c	/^Literal *new_Literal( void ) $/;"	f
new_MixedOperator	memory.c	/^MixedOperator *new_MixedOperator( Operator *op ) {$/;"	f
new_NormEffect1	memory.c	/^NormEffect *new_NormEffect1( Effect *e ) {$/;"	f
new_NormEffect2	memory.c	/^NormEffect *new_NormEffect2( NormEffect *e )$/;"	f
new_NormOperator	memory.c	/^NormOperator *new_NormOperator( Operator *op ) {$/;"	f
new_Operator	memory.c	/^Operator *new_Operator( char *name, int norp )$/;"	f
new_PlanHashEntry	memory.c	/^PlanHashEntry *new_PlanHashEntry( void )$/;"	f
new_PlanNode	memory.c	/^PlanNode* new_PlanNode( void ){$/;"	f
new_PlNode	memory.c	/^PlNode *new_PlNode( Connective c ) {$/;"	f
new_PlOperator	memory.c	/^PlOperator *new_PlOperator( char *name )$/;"	f
new_PseudoAction	memory.c	/^PseudoAction *new_PseudoAction( MixedOperator *op )$/;"	f
new_PseudoActionEffect	memory.c	/^PseudoActionEffect *new_PseudoActionEffect( void )$/;"	f
new_StateActionPair	memory.c	/^StateActionPair* new_StateActionPair( void ){$/;"	f
new_Token	memory.c	/^char *new_Token( int len ) {$/;"	f
new_TokenList	memory.c	/^TokenList *new_TokenList( void )$/;"	f
new_TypedList	memory.c	/^TypedList *new_TypedList( void )$/;"	f
new_TypedListList	memory.c	/^TypedListList *new_TypedListList( void )$/;"	f
new_WffNode	memory.c	/^WffNode *new_WffNode( Connective c )$/;"	f
next	ff.h	/^  struct _Action *next;$/;"	m	struct:_Action	typeref:struct:_Action::_Action
next	ff.h	/^  struct _BfsHashEntry *next;$/;"	m	struct:_BfsHashEntry	typeref:struct:_BfsHashEntry::_BfsHashEntry
next	ff.h	/^  struct _BfsNode *next;$/;"	m	struct:_BfsNode	typeref:struct:_BfsNode::_BfsNode
next	ff.h	/^  struct _EasyTemplate *next;$/;"	m	struct:_EasyTemplate	typeref:struct:_EasyTemplate::_EasyTemplate
next	ff.h	/^  struct _Effect *next;$/;"	m	struct:_Effect	typeref:struct:_Effect::_Effect
next	ff.h	/^  struct _EhcHashEntry *next;$/;"	m	struct:_EhcHashEntry	typeref:struct:_EhcHashEntry::_EhcHashEntry
next	ff.h	/^  struct _EhcNode *next;$/;"	m	struct:_EhcNode	typeref:struct:_EhcNode::_EhcNode
next	ff.h	/^  struct _FactList *next;$/;"	m	struct:_FactList	typeref:struct:_FactList::_FactList
next	ff.h	/^  struct _Facts *next;$/;"	m	struct:_Facts	typeref:struct:_Facts::_Facts
next	ff.h	/^  struct _Literal *next;$/;"	m	struct:_Literal	typeref:struct:_Literal::_Literal
next	ff.h	/^  struct _MixedOperator *next;$/;"	m	struct:_MixedOperator	typeref:struct:_MixedOperator::_MixedOperator
next	ff.h	/^  struct _NormEffect *next;$/;"	m	struct:_NormEffect	typeref:struct:_NormEffect::_NormEffect
next	ff.h	/^  struct _PlanHashEntry *next;$/;"	m	struct:_PlanHashEntry	typeref:struct:_PlanHashEntry::_PlanHashEntry
next	ff.h	/^  struct _PlNode *next;$/;"	m	struct:_PlNode	typeref:struct:_PlNode::_PlNode
next	ff.h	/^  struct _PlOperator *next;$/;"	m	struct:_PlOperator	typeref:struct:_PlOperator::_PlOperator
next	ff.h	/^  struct _PseudoActionEffect *next;$/;"	m	struct:_PseudoActionEffect	typeref:struct:_PseudoActionEffect::_PseudoActionEffect
next	ff.h	/^  struct _TokenList *next;$/;"	m	struct:_TokenList	typeref:struct:_TokenList::_TokenList
next	ff.h	/^  struct _TypedList *next;$/;"	m	struct:_TypedList	typeref:struct:_TypedList::_TypedList
next	ff.h	/^  struct _TypedListList *next;$/;"	m	struct:_TypedListList	typeref:struct:_TypedListList::_TypedListList
next	ff.h	/^  struct _WffNode *next;$/;"	m	struct:_WffNode	typeref:struct:_WffNode::_WffNode
next	fip.h	/^	struct	_StateActionPair	*next;$/;"	m	struct:_StateActionPair	typeref:struct:_StateActionPair::_StateActionPair
next_step	ff.h	/^  struct _PlanHashEntry *next_step;$/;"	m	struct:_PlanHashEntry	typeref:struct:_PlanHashEntry::_PlanHashEntry
normalize_all_wffs	inst_pre.c	/^void normalize_all_wffs( void ) {$/;"	f
normalize_tyl_in_pl	parse.c	/^void normalize_tyl_in_pl( PlNode **n ) {$/;"	f
NormEffect	ff.h	/^} NormEffect;$/;"	t	typeref:struct:_NormEffect
NormOperator	ff.h	/^} NormOperator, *NormOperator_pointer;$/;"	t	typeref:struct:_NormOperator
NormOperator_pointer	ff.h	/^} NormOperator, *NormOperator_pointer;$/;"	t	typeref:struct:_NormOperator
norm_operator	ff.h	/^  NormOperator *norm_operator;$/;"	m	struct:_Action
NOT	ff.h	/^			   NOT, $/;"	e	enum:_Connective
NOTs_down_in_wff	inst_pre.c	/^void NOTs_down_in_wff( WffNode **w )$/;"	f
NOT_p	ff.h	/^  int NOT_p;$/;"	m	struct:_WffNode
number_of_real_params	ff.h	/^  int number_of_real_params; $/;"	m	struct:_Operator
number_of_real_params	ff.h	/^  int number_of_real_params; $/;"	m	struct:_PlOperator
numP	fip.h	/^	int	numP;			\/*Number of PI parents so far*\/$/;"	m	struct:_StateActionPair
num_A	ff.h	/^  int num_A;$/;"	m	struct:_EfConn
num_A	ff.h	/^  int num_A;$/;"	m	struct:_FtConn
num_actions	fip.h	/^	int num_actions;$/;"	m	struct:_ActionGroup
num_active_PCs	ff.h	/^  int num_active_PCs;$/;"	m	struct:_EfConn
num_adds	ff.h	/^  int num_adds;$/;"	m	struct:_ActionEffect
num_adds	ff.h	/^  int num_adds;$/;"	m	struct:_NormEffect
num_adds	ff.h	/^  int num_adds;$/;"	m	struct:_PseudoActionEffect
num_B	ff.h	/^  int num_B; \/*number of branch*\/$/;"	m	struct:_State
num_conditions	ff.h	/^  int num_conditions;$/;"	m	struct:_ActionEffect
num_conditions	ff.h	/^  int num_conditions;$/;"	m	struct:_NormEffect
num_conditions	ff.h	/^  int num_conditions;$/;"	m	struct:_PseudoActionEffect
num_D	ff.h	/^  int num_D;$/;"	m	struct:_EfConn
num_D	ff.h	/^  int num_D;$/;"	m	struct:_FtConn
num_dels	ff.h	/^  int num_dels;$/;"	m	struct:_ActionEffect
num_dels	ff.h	/^  int num_dels;$/;"	m	struct:_NormEffect
num_dels	ff.h	/^  int num_dels;$/;"	m	struct:_PseudoActionEffect
num_E	ff.h	/^  int num_E;$/;"	m	struct:_OpConn
num_effects	ff.h	/^  int num_effects;$/;"	m	struct:_Action
num_effects	ff.h	/^  int num_effects;$/;"	m	struct:_PseudoAction
num_F	ff.h	/^  int num_F;$/;"	m	struct:_State
num_False	ff.h	/^  int num_False;$/;"	m	struct:_FtConn
num_I	ff.h	/^  int num_I;$/;"	m	struct:_EfConn
num_L	ff.h	/^  int num_L; \/*number of level*\/$/;"	m	struct:_State
num_name_vars	ff.h	/^  int num_name_vars;$/;"	m	struct:_Action
num_PC	ff.h	/^  int num_PC;$/;"	m	struct:_EfConn
num_PC	ff.h	/^  int num_PC;$/;"	m	struct:_FtConn
num_preconds	ff.h	/^  int num_preconds;$/;"	m	struct:_Action
num_preconds	ff.h	/^  int num_preconds;$/;"	m	struct:_MixedOperator
num_preconds	ff.h	/^  int num_preconds;$/;"	m	struct:_NormOperator
num_preconds	ff.h	/^  int num_preconds;$/;"	m	struct:_PseudoAction
num_removed_vars	ff.h	/^  int removed_vars[MAX_VARS], num_removed_vars, type_removed_vars[MAX_VARS];$/;"	m	struct:_NormOperator
num_sons	fip.h	/^	int num_sons;$/;"	m	struct:_PlanNode
num_vars	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_Effect
num_vars	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_NormEffect
num_vars	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_NormOperator
num_vars	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_Operator
OBJECTS	makefile	/^OBJECTS 	= $(SOURCES:.c=.o)$/;"	m
objects_def	scan-fct_pddl.y	/^objects_def:$/;"	l
op	ff.h	/^  int op;$/;"	m	struct:_BfsNode
op	ff.h	/^  int op;$/;"	m	struct:_EfConn
op	ff.h	/^  int op;$/;"	m	struct:_EhcNode
op	ff.h	/^  NormOperator *op;$/;"	m	struct:_EasyTemplate
OpConn	ff.h	/^} OpConn;$/;"	t	typeref:struct:_OpConn
operator	ff.h	/^  Operator *operator;$/;"	m	struct:_MixedOperator
operator	ff.h	/^  Operator *operator;$/;"	m	struct:_NormOperator
operator	ff.h	/^  Operator *operator;$/;"	m	struct:_PseudoAction
Operator	ff.h	/^} Operator, *Operator_pointer;$/;"	t	typeref:struct:_Operator
Operator_pointer	ff.h	/^} Operator, *Operator_pointer;$/;"	t	typeref:struct:_Operator
ops_file_name	ff.h	/^  char ops_file_name[MAX_LENGTH];$/;"	m	struct:_command_line
optional_domain_defs	scan-ops_pddl.y	/^optional_domain_defs:$/;"	l
OR	ff.h	/^			   OR, $/;"	e	enum:_Connective
out	ff.h	/^  Bool out;$/;"	m	struct:_NormOperator
out	main.c	/^FILE *out;$/;"	v
output_planner_info	main.c	/^void output_planner_info( void )$/;"	f
params	ff.h	/^  FactList *params;$/;"	m	struct:_PlOperator
param_def	scan-mul_pddl.y	/^param_def:$/;"	l
param_def	scan-ops_pddl.y	/^param_def:$/;"	l
parent	fip.h	/^	State	parent[MAX_PI_PARENTS];	\/*Jicheng: Pi Parent. Used for backtracking*\/$/;"	m	struct:_StateActionPair
parse_params	ff.h	/^  TypedList *parse_params;$/;"	m	struct:_PlOperator
parse_vars	ff.h	/^  TypedList *parse_vars;$/;"	m	struct:_PlNode
path	ff.h	/^  char path[MAX_LENGTH];$/;"	m	struct:_command_line
PC	ff.h	/^  int *PC;$/;"	m	struct:_EfConn
PC	ff.h	/^  int *PC;$/;"	m	struct:_FtConn
PDDL_PARSER_OBJ	makefile	/^PDDL_PARSER_OBJ = scan-fct_pddl.tab.o \\$/;"	m
PDDL_PARSER_SRC	makefile	/^PDDL_PARSER_SRC	= scan-fct_pddl.tab.c \\$/;"	m
perform_reachability_analysis	inst_final.c	/^void perform_reachability_analysis( void ) {$/;"	f
PlanHashEntry	ff.h	/^} PlanHashEntry, *PlanHashEntry_pointer;$/;"	t	typeref:struct:_PlanHashEntry
PlanHashEntry_pointer	ff.h	/^} PlanHashEntry, *PlanHashEntry_pointer;$/;"	t	typeref:struct:_PlanHashEntry
PlanNode	fip.h	/^} PlanNode;$/;"	t	typeref:struct:_PlanNode
PLAN_HASH_BITS	ff.h	/^#define PLAN_HASH_BITS /;"	d
PLAN_HASH_SIZE	ff.h	/^#define PLAN_HASH_SIZE /;"	d
plan_state_hashed	search.c	/^PlanHashEntry *plan_state_hashed( State *S )$/;"	f
PlNode	ff.h	/^} PlNode;$/;"	t	typeref:struct:_PlNode
PlOperator	ff.h	/^} PlOperator;$/;"	t	typeref:struct:_PlOperator
position_in_constants_table	inst_pre.c	/^int position_in_constants_table( char *str )$/;"	f
position_in_predicates_table	inst_pre.c	/^int position_in_predicates_table( char *str )$/;"	f
position_in_types_table	inst_pre.c	/^int position_in_types_table( char *str ) {$/;"	f
possibly_achievable	orderings.c	/^Bool possibly_achievable( int ft ) {$/;"	f
possibly_achievable_for_multiple_purpose	orderings.c	/^Bool possibly_achievable_for_multiple_purpose ( int ft ) {$/;"	f
possibly_negative	inst_pre.c	/^Bool possibly_negative( Fact *f )$/;"	f
possibly_positive	inst_pre.c	/^Bool possibly_positive( Fact *f )$/;"	f
preconds	ff.h	/^  Fact *preconds;$/;"	m	struct:_MixedOperator
preconds	ff.h	/^  Fact *preconds;$/;"	m	struct:_NormOperator
preconds	ff.h	/^  Fact *preconds;$/;"	m	struct:_PseudoAction
preconds	ff.h	/^  int *preconds;$/;"	m	struct:_Action
preconds	ff.h	/^  PlNode *preconds;$/;"	m	struct:_PlOperator
preconds	ff.h	/^  WffNode *preconds;$/;"	m	struct:_Operator
predicate	ff.h	/^  char *predicate;$/;"	m	struct:_TypedListList
predicate	ff.h	/^  int predicate, args[MAX_ARITY];$/;"	m	struct:_Fact
predicate	scan-fct_pddl.y	/^predicate:$/;"	l
predicate	scan-mul_pddl.y	/^predicate:$/;"	l
predicate	scan-ops_pddl.y	/^predicate:$/;"	l
predicates_def	scan-ops_pddl.y	/^predicates_def :$/;"	l
predicates_list	scan-ops_pddl.y	/^predicates_list :$/;"	l
prev	ff.h	/^  struct _BfsNode *prev;$/;"	m	struct:_BfsNode	typeref:struct:_BfsNode::_BfsNode
prev	ff.h	/^  struct _EasyTemplate *prev;$/;"	m	struct:_EasyTemplate	typeref:struct:_EasyTemplate::_EasyTemplate
prev	ff.h	/^  struct _Effect *prev;$/;"	m	struct:_Effect	typeref:struct:_Effect::_Effect
prev	ff.h	/^  struct _Literal *prev;$/;"	m	struct:_Literal	typeref:struct:_Literal::_Literal
prev	ff.h	/^  struct _NormEffect *prev;$/;"	m	struct:_NormEffect	typeref:struct:_NormEffect::_NormEffect
prev	ff.h	/^  struct _WffNode *prev;$/;"	m	struct:_WffNode	typeref:struct:_WffNode::_WffNode
print_Action	output.c	/^void print_Action( Action *a )$/;"	f
print_all_states	fip.c	/^void print_all_states( void ){$/;"	f
print_desired_state	fip.c	/^void print_desired_state(  StateActionPair *pCurrent, int indent){$/;"	f
print_end_state	fip.c	/^void print_end_state( StateActionPair *pCurrentState, int indent) {$/;"	f
print_Fact	output.c	/^void print_Fact( Fact *f )$/;"	f
print_FactList	output.c	/^void print_FactList( FactList *list, char *sepf, char *sept )$/;"	f
print_fip_plan_1	fip.c	/^void print_fip_plan_1( StateActionPair *pCurrentState,  $/;"	f
print_fip_plan_2	fip.c	/^void print_fip_plan_2(void){$/;"	f
print_fip_plan_3	fip.c	/^void print_fip_plan_3( PlanNode * pNode, int level ){$/;"	f
print_fixpoint_result	relax.c	/^void print_fixpoint_result( void )$/;"	f
print_ft_name	output.c	/^void print_ft_name( int index )$/;"	f
print_hidden_TokenList	output.c	/^void print_hidden_TokenList( TokenList *list, char *sep )$/;"	f
print_indent	output.c	/^void print_indent( int indent )$/;"	f
print_MixedOperator	output.c	/^void print_MixedOperator( MixedOperator *o )$/;"	f
print_NormOperator	output.c	/^void print_NormOperator( NormOperator *o )$/;"	f
print_official_op_name	main.c	/^void print_official_op_name( int index )$/;"	f
print_official_result	main.c	/^void print_official_result( void )$/;"	f
print_Operator	output.c	/^void print_Operator( Operator *o )$/;"	f
print_op_name	output.c	/^void print_op_name( int index )$/;"	f
print_plan	output.c	/^void print_plan( void ) {  $/;"	f
print_PlNode	output.c	/^void print_PlNode( PlNode *plnode, int indent )$/;"	f
print_plops	output.c	/^void print_plops( PlOperator *plop )$/;"	f
print_PseudoAction	output.c	/^void print_PseudoAction( PseudoAction *o )$/;"	f
print_state	search.c	/^void print_state( State S )$/;"	f
print_state_level	fip.c	/^void print_state_level(State s){$/;"	f
print_type	output.c	/^void print_type( int t )$/;"	f
print_undesired_state	fip.c	/^void print_undesired_state(  StateActionPair *pCurrent, PlanNode *pPlanNode, int indent) {$/;"	f
print_Wff	output.c	/^void print_Wff( WffNode *n, int indent )$/;"	f
problem_definition	scan-fct_pddl.y	/^problem_definition : $/;"	l
problem_defs	scan-fct_pddl.y	/^problem_defs:$/;"	l
problem_name	scan-fct_pddl.y	/^problem_name :$/;"	l
problem_name	scan-mul_pddl.y	/^problem_name :$/;"	l
process_command_line	main.c	/^Bool process_command_line( int argc, char *argv[] ) {$/;"	f
PseudoAction	ff.h	/^} PseudoAction, *PseudoAction_pointer;$/;"	t	typeref:struct:_PseudoAction
PseudoActionEffect	ff.h	/^} PseudoActionEffect;$/;"	t	typeref:struct:_PseudoActionEffect
PseudoAction_pointer	ff.h	/^} PseudoAction, *PseudoAction_pointer;$/;"	t	typeref:struct:_PseudoAction
pseudo_action	ff.h	/^  PseudoAction *pseudo_action;$/;"	m	struct:_Action
p_actions	fip.h	/^	int	p_actions[MAX_PI_PARENTS];	\/*parent state-action pair*\/$/;"	m	struct:_StateActionPair
rand	ff.h	/^  int rand;\/* for hashing *\/$/;"	m	struct:_FtConn
RELAXED_STEPS_DEFAULT	ff.h	/^#define RELAXED_STEPS_DEFAULT /;"	d
removed	ff.h	/^  Bool removed;$/;"	m	struct:_EfConn
removed	ff.h	/^  Bool removed[MAX_VARS];$/;"	m	struct:_Operator
removed_vars	ff.h	/^  int removed_vars[MAX_VARS], num_removed_vars, type_removed_vars[MAX_VARS];$/;"	m	struct:_NormOperator
remove_unused_easy_effect_parameters	inst_easy.c	/^void remove_unused_easy_effect_parameters( NormOperator *o, NormEffect *e ) {$/;"	f
remove_unused_easy_parameters	inst_easy.c	/^void remove_unused_easy_parameters( void ) {$/;"	f
remove_unused_easy_parameters_for_multiple_purpose	inst_easy.c	/^void remove_unused_easy_parameters_for_multiple_purpose ( void ) {$/;"	f
remove_unused_vars_in_wff	inst_pre.c	/^void remove_unused_vars_in_wff( WffNode **w ) {$/;"	f
replace_not_p_with_n_in_wff	inst_pre.c	/^void replace_not_p_with_n_in_wff( int p, int n, WffNode **w ) {$/;"	f
require_def	scan-ops_pddl.y	/^require_def:$/;"	l
require_key_star	scan-ops_pddl.y	/^require_key_star:$/;"	l
reset_ehc_hash_entrys	search.c	/^void reset_ehc_hash_entrys( void ) {$/;"	f
reset_ff_states	fip.c	/^void reset_ff_states( void ){$/;"	f
reset_fixpoint	relax.c	/^void reset_fixpoint( void ) {$/;"	f
reset_relax	relax.c	/^void reset_relax( void ){$/;"	f
reset_search	search.c	/^void reset_search( void ){$/;"	f
reset_search_info	relax.c	/^void reset_search_info( void )$/;"	f
result_to_dest	search.c	/^int result_to_dest( State *dest, State *source, int op ) {$/;"	f
rmdash	parse.c	/^char *rmdash( char *s )$/;"	f
rm_unsolved_states	fip.c	/^void rm_unsolved_states(State *s){$/;"	f
rm_unsolved_states_ex_self	fip.c	/^void rm_unsolved_states_ex_self(State *s){$/;"	f
RUNTIME_ERROR	fip.c	/^#define RUNTIME_ERROR(/;"	d	file:
S	ff.h	/^  State S;$/;"	m	struct:_BfsNode
S	ff.h	/^  State S;$/;"	m	struct:_EhcNode
S	ff.h	/^  State S;$/;"	m	struct:_PlanHashEntry
SAME	ff.h	/^#define SAME /;"	d
same_state	search.c	/^Bool same_state( State *S1, State *S2 ) {$/;"	f
search_for_better_state	search.c	/^Bool search_for_better_state ( State *S, int h, State *S_, int *h_ ) {$/;"	f
setup_E	orderings.c	/^void setup_E( int ft ) {$/;"	f
setup_E_for_multiple_purpose	orderings.c	/^void setup_E_for_multiple_purpose ( int ft ) {$/;"	f
simplify_wff	inst_pre.c	/^void simplify_wff( WffNode **w ) {$/;"	f
solve_unsolved_states	fip.c	/^void solve_unsolved_states(void){$/;"	f
son	ff.h	/^  struct _WffNode *son;$/;"	m	struct:_WffNode	typeref:struct:_WffNode::_WffNode
sons	ff.h	/^  struct _PlNode *sons;$/;"	m	struct:_PlNode	typeref:struct:_PlNode::_PlNode
sons	ff.h	/^  struct _WffNode *sons;$/;"	m	struct:_WffNode	typeref:struct:_WffNode::_WffNode
sons	fip.h	/^	struct _PlanNode *sons[MAX_NUM_D_ACTION];$/;"	m	struct:_PlanNode	typeref:struct:_PlanNode::_PlanNode
SOURCES	makefile	/^SOURCES 	= main.c \\$/;"	m
source_to_dest	search.c	/^void source_to_dest( State *dest, State *source ) {$/;"	f
split_domain	inst_pre.c	/^void split_domain( void ) {$/;"	f
split_initial_state	inst_pre.c	/^void split_initial_state( void ) {$/;"	f
STANDARD_TYPE	ff.h	/^#define STANDARD_TYPE /;"	d
State	ff.h	/^} State, *State_pointer;$/;"	t	typeref:struct:_State
state	fip.h	/^	State	state;			\/* key *\/$/;"	m	struct:_StateActionPair
StateActionPair	fip.h	/^} StateActionPair;$/;"	t	typeref:struct:_StateActionPair
State_pointer	ff.h	/^} State, *State_pointer;$/;"	t	typeref:struct:_State
state_sum	search.c	/^int state_sum( State *S ) {$/;"	f
step	ff.h	/^  int step;$/;"	m	struct:_PlanHashEntry
strupcase	parse.c	/^void strupcase( char *from )$/;"	f
sum	ff.h	/^  int sum;$/;"	m	struct:_BfsHashEntry
sum	ff.h	/^  int sum;$/;"	m	struct:_EhcHashEntry
sum	ff.h	/^  int sum;$/;"	m	struct:_PlanHashEntry
term	scan-fct_pddl.y	/^term:$/;"	l
term	scan-mul_pddl.y	/^term:$/;"	l
term	scan-ops_pddl.y	/^term:$/;"	l
term_star	scan-fct_pddl.y	/^term_star:$/;"	l
term_star	scan-mul_pddl.y	/^term_star:$/;"	l
term_star	scan-ops_pddl.y	/^term_star:$/;"	l
TIME	ff.h	/^#define TIME(/;"	d
Token	ff.h	/^typedef char *Token;$/;"	t
TokenList	ff.h	/^} TokenList;$/;"	t	typeref:struct:_TokenList
to_print_state	main.c	/^Bool to_print_state = FALSE;$/;"	v
transferToNextState	fip.c	/^StateActionPair* transferToNextState( StateActionPair *pCurrent, int op ){$/;"	f
translate_negative_preconds	inst_pre.c	/^void translate_negative_preconds( void ) {$/;"	f
translate_one_negative_cond	inst_pre.c	/^Bool translate_one_negative_cond( WffNode *w ) {$/;"	f
TRU	ff.h	/^typedef enum _Connective{TRU,$/;"	e	enum:_Connective
TRUE	ff.h	/^#define TRUE /;"	d
try_other_path	fip.c	/^void try_other_path(StateActionPair *s, int a){	$/;"	f
type	ff.h	/^  TokenList *type;$/;"	m	struct:_TypedList
TYPE	makefile	/^TYPE	= $/;"	m
TypeArray	ff.h	/^typedef int TypeArray[MAX_TYPE_INTERSECTIONS];$/;"	t
TypedList	ff.h	/^} TypedList;$/;"	t	typeref:struct:_TypedList
TypedListList	ff.h	/^} TypedListList;$/;"	t	typeref:struct:_TypedListList
typed_list_name	scan-fct_pddl.y	/^typed_list_name:     \/* returns TypedList *\/$/;"	l
typed_list_name	scan-ops_pddl.y	/^typed_list_name:     \/* returns TypedList *\/$/;"	l
typed_list_variable	scan-fct_pddl.y	/^typed_list_variable:     \/* returns TypedList *\/$/;"	l
typed_list_variable	scan-mul_pddl.y	/^typed_list_variable:     \/* returns TypedList *\/$/;"	l
typed_list_variable	scan-ops_pddl.y	/^typed_list_variable:     \/* returns TypedList *\/$/;"	l
types_def	scan-ops_pddl.y	/^types_def:$/;"	l
type_removed_vars	ff.h	/^  int removed_vars[MAX_VARS], num_removed_vars, type_removed_vars[MAX_VARS];$/;"	m	struct:_NormOperator
unify_easy_inertia_conditions	inst_easy.c	/^void unify_easy_inertia_conditions( int curr_inertia ) {$/;"	f
unify_easy_inertia_conditions_for_multiple_purpose	inst_easy.c	/^void unify_easy_inertia_conditions_for_multiple_purpose( int curr_inertia ) {$/;"	f
unify_easy_inertia_preconds	inst_easy.c	/^void unify_easy_inertia_preconds( int curr_inertia )$/;"	f
unsetup_E	orderings.c	/^void unsetup_E( int ft ) {$/;"	f
update_intended_effect	fip.c	/^void update_intended_effect(StateActionPair *ptr, StateActionPair *pState){$/;"	f
update_reachability_analysis_for_multiple_purpose	inst_final.c	/^void update_reachability_analysis_for_multiple_purpose ( void ) {$/;"	f
var	ff.h	/^  int var, var_type;$/;"	m	struct:_WffNode
VARIABLE_STR	ff.h	/^#define VARIABLE_STR /;"	d
var_name	ff.h	/^  char *var_name;$/;"	m	struct:_WffNode
var_names	ff.h	/^  char *name, *var_names[MAX_VARS];$/;"	m	struct:_Operator
var_names	ff.h	/^  char *var_names[MAX_VARS];$/;"	m	struct:_Effect
var_type	ff.h	/^  int var, var_type;$/;"	m	struct:_WffNode
var_types	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_Effect
var_types	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_NormEffect
var_types	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_NormOperator
var_types	ff.h	/^  int num_vars, var_types[MAX_VARS];$/;"	m	struct:_Operator
var_used_in_wff	inst_pre.c	/^Bool var_used_in_wff( int code_var, WffNode *w ) {$/;"	f
visited	ff.h	/^  Bool visited;$/;"	m	struct:_WffNode
WffNode	ff.h	/^} WffNode, *WffNode_pointer;$/;"	t	typeref:struct:_WffNode
WffNode_pointer	ff.h	/^} WffNode, *WffNode_pointer;$/;"	t	typeref:struct:_WffNode
WHEN	ff.h	/^			   WHEN} Connective;$/;"	e	enum:_Connective
_Action	ff.h	/^typedef struct _Action {$/;"	s
_ActionEffect	ff.h	/^typedef struct _ActionEffect {$/;"	s
_ActionGroup	fip.h	/^typedef struct _ActionGroup {$/;"	s
_BfsHashEntry	ff.h	/^typedef struct _BfsHashEntry {$/;"	s
_BfsNode	ff.h	/^typedef struct _BfsNode {$/;"	s
_command_line	ff.h	/^struct _command_line {$/;"	s
_Connective	ff.h	/^typedef enum _Connective{TRU,$/;"	g
_EasyTemplate	ff.h	/^typedef struct _EasyTemplate {$/;"	s
_EfConn	ff.h	/^typedef struct _EfConn {$/;"	s
_Effect	ff.h	/^typedef struct _Effect {$/;"	s
_EhcHashEntry	ff.h	/^typedef struct _EhcHashEntry {$/;"	s
_EhcNode	ff.h	/^typedef struct _EhcNode {$/;"	s
_Fact	ff.h	/^typedef struct _Fact {$/;"	s
_FactList	ff.h	/^typedef struct _FactList {$/;"	s
_Facts	ff.h	/^typedef struct _Facts {$/;"	s
_FtConn	ff.h	/^typedef struct _FtConn {$/;"	s
_INST_EASY_H	inst_easy.h	/^#define _INST_EASY_H$/;"	d
_INST_FINAL_H	inst_final.h	/^#define _INST_FINAL_H$/;"	d
_INST_HARD_H	inst_hard.h	/^#define _INST_HARD_H$/;"	d
_INST_PRE_H	inst_pre.h	/^#define _INST_PRE_H$/;"	d
_Literal	ff.h	/^typedef struct _Literal {$/;"	s
_MEMORY_H	memory.h	/^#define _MEMORY_H$/;"	d
_MixedOperator	ff.h	/^typedef struct _MixedOperator {$/;"	s
_NormEffect	ff.h	/^typedef struct _NormEffect {$/;"	s
_NormOperator	ff.h	/^typedef struct _NormOperator {$/;"	s
_OpConn	ff.h	/^typedef struct _OpConn {$/;"	s
_Operator	ff.h	/^typedef struct _Operator {$/;"	s
_ORDERINGS_H	orderings.h	/^#define _ORDERINGS_H$/;"	d
_OUTPUT_H	output.h	/^#define _OUTPUT_H$/;"	d
_PARSE_H	parse.h	/^#define _PARSE_H$/;"	d
_PlanHashEntry	ff.h	/^typedef struct _PlanHashEntry {$/;"	s
_PlanNode	fip.h	/^typedef struct _PlanNode {$/;"	s
_PlNode	ff.h	/^typedef struct _PlNode {$/;"	s
_PlOperator	ff.h	/^typedef struct _PlOperator {$/;"	s
_PseudoAction	ff.h	/^typedef struct _PseudoAction {$/;"	s
_PseudoActionEffect	ff.h	/^typedef struct _PseudoActionEffect {$/;"	s
_RELAX_H	relax.h	/^#define _RELAX_H$/;"	d
_SEARCH_H	search.h	/^#define _SEARCH_H$/;"	d
_State	ff.h	/^typedef struct _State {$/;"	s
_StateActionPair	fip.h	/^typedef struct _StateActionPair {$/;"	s
_TokenList	ff.h	/^typedef struct _TokenList {$/;"	s
_TypedList	ff.h	/^typedef struct _TypedList {$/;"	s
_TypedListList	ff.h	/^typedef struct _TypedListList {$/;"	s
_WffNode	ff.h	/^typedef struct _WffNode {$/;"	s
__FF_H	ff.h	/^#define __FF_H$/;"	d
